// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  uuid       String      @unique @default(uuid())
  email      String      @unique
  password   String
  candidates Candidate[]
}

model Address {
  id           Int         @id @default(autoincrement())
  uuid         String      @unique @default(uuid())
  street       String?
  complement   String?
  neighborhood String?
  city         String?
  uf           String?
  number       Int?        @default(0)
  cep          Int?        @default(0)
  Candidate    Candidate[]
  Job          Job[]

  @@unique([cep, number])
}

model Candidate {
  id    Int    @id @default(autoincrement())
  uuid  String @unique @default(uuid())
  nick  String @unique
  email String
  name  String
  image String

  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId Int?
  contacts  Contact[]
  jobs      Job[]
}

model Job {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  company     String?
  occupation  String?
  description String?
  begin       DateTime
  finish      DateTime?
  Address     Address?   @relation(fields: [addressId], references: [id])
  addressId   Int?
  Candidate   Candidate? @relation(fields: [candidateId], references: [id])
  candidateId Int?
  skills      Skill[]
}

model Contact {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  phone       String?
  name        String?
  Candidate   Candidate? @relation(fields: [candidateId], references: [id])
  candidateId Int?
}

model Skill {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid())
  tag       String     @unique
  title     String     @unique
  questions Question[]
  job       Job?       @relation(fields: [jobId], references: [id])
  jobId     Int?
  Skill     Skill?     @relation("SkillToSkill", fields: [skillId], references: [id])
  skillId   Int?
  libs      Skill[]    @relation("SkillToSkill")
}

// model SkillLab {
//   id        Int        @id @default(autoincrement())
//   uuid      String     @unique @default(uuid())
//   tag       String     @unique
//   title     String     @unique
//   skill     Skill?     @relation(fields: [skillId], references: [id])
//   skillId   Int?
//   job       Job?       @relation(fields: [jobId], references: [id])
//   jobId     Int?
//   questions Question[]
// }

model Question {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  description String
  answers     Answer[]
  Skill       Skill?   @relation(fields: [skillId], references: [id])
  skillId     Int?
}

model Answer {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  description String
  isValid     Boolean   @default(false)
  Question    Question? @relation(fields: [questionId], references: [id])
  questionId  Int?
}
